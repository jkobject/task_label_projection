import anndata as ad
import scvi 
import cellmapper as cm
import pandas as pd

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    'input_train': 'resources_test/task_label_projection/cxg_immune_cell_atlas/train.h5ad',
    'input_test': 'resources_test/task_label_projection/cxg_immune_cell_atlas/test.h5ad',
    'output': 'output.h5ad',
    'num_hvg': 2000,
    'n_latent': 30,
    'n_hidden': 128,
    'n_layers': 2,
    'n_neighbors': 30, 
    'kernel_method': 'hnoca',
}
meta = {
  'name': 'cellmapper_scvi',
}
## VIASH END

print('Reading input files', flush=True)
input_train = ad.read_h5ad(par['input_train'])
input_test = ad.read_h5ad(par['input_test'])

print('Preprocess data', flush=True)
if par["num_hvg"]:
    print("Subsetting to HVG", flush=True)
    hvg_idx = input_train.var['hvg_score'].to_numpy().argsort()[:par["num_hvg"]]
    input_train = input_train[:,hvg_idx]
    input_test = input_test[:,hvg_idx]

print("Concatenating train and test data", flush=True)
adata = ad.concat([input_train, input_test], merge = "same", label="split", keys=["train", "test"])

print('Create and train SCVI model', flush=True)
scvi.model.SCVI.setup_anndata(adata, batch_key="batch", layer="counts")

model_kwargs = {
    key: par[key]
    for key in ["n_latent", "n_hidden", "n_layers"]
    if par[key] is not None
}

model = scvi.model.SCVI(adata, **model_kwargs)
model.train(early_stopping=True)
adata.obsm["X_scvi"] = model.get_latent_representation()

# Place the representation back into individual objects
input_train.obsm["X_scvi"] = adata[adata.obs["split"] == "train"].obsm["X_scvi"].copy()
input_test.obsm["X_scvi"] = adata[adata.obs["split"] == "test"].obsm["X_scvi"].copy()


print('Setup and prepare Cellmapper', flush=True)
cmap = cm.CellMapper(query=input_test, reference=input_train)
cmap.compute_neighbors(
    use_rep="X_scvi",
    n_neighbors=par['n_neighbors'], 
    )
cmap.compute_mapping_matrix(kernel_method=par['kernel_method'])

print("Predict on test data", flush=True)
cmap.map_obs(key="label", prediction_postfix="pred")
label_pred = cmap.query.obs["label_pred"].astype(str)

print("Create output data", flush=True)
output = ad.AnnData(
    obs=pd.DataFrame(
        { 'label_pred': label_pred },
        index=input_test.obs.index
    ),
    uns={
        'method_id': meta['name'],
        "dataset_id": input_test.uns["dataset_id"],
        "normalization_id": input_test.uns["normalization_id"]
    }
)

print("Write output data", flush=True)
output.write_h5ad(par['output'], compression="gzip")
