import anndata as ad
import pandas as pd
import cellmapper as cm

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    'input_train': 'resources_test/task_label_projection/cxg_immune_cell_atlas/train.h5ad',
    'input_test': 'resources_test/task_label_projection/cxg_immune_cell_atlas/test.h5ad',
    'output': 'output.h5ad',
    'use_rep': "X_pca",  # or None for fallback_representation
    'fallback_representation': 'fast_cca', 
    'n_neighbors': 30, 
    'kernel_method': 'hnoca'  

}
meta = {
  'name': 'cellmapper_linear',
}
## VIASH END

print("Load input data", flush=True)
input_train = ad.read_h5ad(par['input_train'])
input_test = ad.read_h5ad(par['input_test'])

# Let's make sure we have normalized data in .X
input_train.X = input_train.layers["normalized"].copy()
input_test.X = input_test.layers["normalized"].copy()

print("Set up and prepare Cellmapper", flush=True)
cmap = cm.CellMapper(query=input_test, reference=input_train)
cmap.compute_neighbors(
    use_rep=par['use_rep'],
    fallback_representation=par['fallback_representation'], 
    n_neighbors=par['n_neighbors'], 
    fallback_kwargs={"mask_var": "hvg"},
    )
cmap.compute_mapping_matrix(kernel_method=par['kernel_method'])

print("Predict on test data", flush=True)
cmap.map_obs(key="label", prediction_postfix="pred")
label_pred = cmap.query.obs["label_pred"].astype(str)

print("Create output data", flush=True)
output = ad.AnnData(
    obs=pd.DataFrame(
        { 'label_pred': label_pred },
        index=input_test.obs.index
    ),
    uns={
        'method_id': meta['name'],
        "dataset_id": input_test.uns["dataset_id"],
        "normalization_id": input_test.uns["normalization_id"]
    }
)

print("Write output data", flush=True)
output.write_h5ad(par['output'], compression="gzip")
